{"version":3,"file":"action-redu.js","sourceRoot":"","sources":["../src/redux/action-redu.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,IAAI,EAAE,UAAU,EAAC,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAC,WAAW,EAAE,cAAc,EAAC,MAAM,kBAAkB,CAAC;AAG7D,IAAa,UAAU,GAAvB,MAAa,UAAW,SAAQ,UAAU;IACxC,0DAA0D;IAC1D,eAAe;IACf,iCAAiC;IACjC,QAAQ;IACR,IAAI;IACJ,6DAA6D;IAC7D,uEAAuE;IACpD,MAAM;QACvB,OAAO,IAAI,CAAA,kCAAkC,CAAC;QAE9C,MAAM,YAAY,GAAG,WAAW,CAAC;YAC/B,IAAI,EAAE,SAAS;YACf,YAAY,EAAE;gBACZ,KAAK,EAAE,CAAC;aACT;YACD,QAAQ,EAAE;gBACR,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE;oBACrB,oEAAoE;oBACpE,uEAAuE;oBACvE,oEAAoE;oBACpE,0CAA0C;oBAC1C,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;gBACnB,CAAC;gBACD,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE;oBACrB,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;gBACnB,CAAC;aACF;SACF,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AA9BY,UAAU;IADtB,aAAa,CAAC,aAAa,CAAC;GAChB,UAAU,CA8BtB;SA9BY,UAAU;AA+BvB,MAAM,CAAC,MAAM,EAAC,WAAW,EAAE,WAAW,EAAC,GAAG,YAAY,CAAC,OAAO,CAAC;AAE/D,MAAM,KAAK,GAAG,cAAc,CAAC;IAC3B,OAAO,EAAE,YAAY,CAAC,OAAO;CAC9B,CAAC,CAAC;AAEH,mCAAmC;AACnC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;AAErD,sEAAsE;AACtE,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;AAC9B,aAAa;AACb,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;AAC9B,aAAa;AACb,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;AAC9B,aAAa","sourcesContent":["import {html, LitElement} from 'lit';\r\nimport {customElement} from 'lit/decorators.js';\r\nimport {createSlice, configureStore} from '@reduxjs/toolkit';\r\n\r\n@customElement('action-redu')\r\nexport class ActionRedu extends LitElement {\r\n  // const mapStateToProps = (state: { counter: any; }) => {\r\n  //     return {\r\n  //         counter: state.counter\r\n  //     }\r\n  // }\r\n  // const mapDispatchToProps = { increment, decrement, reset }\r\n  // export default connect(mapStateToProps)(ActionRedu , 'action-redu');\r\n  protected override render() {\r\n    return html` <h2>This is Redux example</h2> `;\r\n\r\n    const counterSlice = createSlice({\r\n      name: 'counter',\r\n      initialState: {\r\n        value: 0,\r\n      },\r\n      reducers: {\r\n        incremented: (state) => {\r\n          // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n          // doesn't actually mutate the state because it uses the Immer library,\r\n          // which detects changes to a \"draft state\" and produces a brand new\r\n          // immutable state based off those changes\r\n          state.value += 1;\r\n        },\r\n        decremented: (state) => {\r\n          state.value -= 1;\r\n        },\r\n      },\r\n    });\r\n  }\r\n}\r\nexport const {incremented, decremented} = counterSlice.actions;\r\n\r\nconst store = configureStore({\r\n  reducer: counterSlice.reducer,\r\n});\r\n\r\n// Can still subscribe to the store\r\nstore.subscribe(() => console.log(store.getState()));\r\n\r\n// Still pass action objects to `dispatch`, but they're created for us\r\nstore.dispatch(incremented());\r\n// {value: 1}\r\nstore.dispatch(incremented());\r\n// {value: 2}\r\nstore.dispatch(decremented());\r\n// {value: 1}\r\n"]}