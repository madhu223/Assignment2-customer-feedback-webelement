{"version":3,"file":"redux-example.js","sourceRoot":"","sources":["src/redux-example.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,aAAa,EAAC,MAAM,iDAAiD,CAAC;AAC9E,OAAO,EAAC,WAAW,EAAE,cAAc,EAAC,MAAM,kBAAkB,CAAC;AAC7D,OAAO,EAAC,UAAU,EAAS,MAAM,KAAK,CAAC;AAGvC,IAAa,OAAO,GAApB,MAAa,OAAQ,SAAQ,UAAU;IAAvC;;QACE,iBAAY,GAAG,WAAW,CAAC;YACzB,IAAI,EAAE,SAAS;YACf,YAAY,EAAE;gBACZ,KAAK,EAAE,CAAC;aACT;YACD,QAAQ,EAAE;gBACR,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE;oBACrB,oEAAoE;oBACpE,uEAAuE;oBACvE,oEAAoE;oBACpE,0CAA0C;oBAC1C,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;gBACnB,CAAC;gBACD,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE;oBACrB,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;gBACnB,CAAC;aACF;SACF,CAAC,CAAC;IACL,CAAC;CAAA,CAAA;AAnBY,OAAO;IADnB,aAAa,CAAC,eAAe,CAAC;GAClB,OAAO,CAmBnB;SAnBY,OAAO;AAoBpB,YAAY;AACZ,mBAAmB;AAEnB,QAAQ;AACR,IAAI;AAEJ,MAAM,CAAC,MAAM,EAAC,WAAW,EAAE,WAAW,EAAC,GAAG,YAAY,CAAC,OAAO,CAAC;AAE/D,MAAM,KAAK,GAAG,cAAc,CAAC;IAC3B,OAAO,EAAE,YAAY,CAAC,OAAO;CAC9B,CAAC,CAAC;AAEH,mCAAmC;AACnC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;AAErD,sEAAsE;AACtE,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;AAC9B,aAAa;AACb,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;AAC9B,aAAa;AACb,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;AAC9B,aAAa","sourcesContent":["import {customElement} from '@lit/reactive-element/decorators/custom-element';\r\nimport {createSlice, configureStore} from '@reduxjs/toolkit';\r\nimport {LitElement, render} from 'lit';\r\n\r\n@customElement('counter-redux')\r\nexport class Counter extends LitElement {\r\n  counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: {\r\n      value: 0,\r\n    },\r\n    reducers: {\r\n      incremented: (state) => {\r\n        // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n        // doesn't actually mutate the state because it uses the Immer library,\r\n        // which detects changes to a \"draft state\" and produces a brand new\r\n        // immutable state based off those changes\r\n        state.value += 1;\r\n      },\r\n      decremented: (state) => {\r\n        state.value -= 1;\r\n      },\r\n    },\r\n  });\r\n}\r\n// render(){\r\n//     return html`\r\n\r\n//     `\r\n// }\r\n\r\nexport const {incremented, decremented} = counterSlice.actions;\r\n\r\nconst store = configureStore({\r\n  reducer: counterSlice.reducer,\r\n});\r\n\r\n// Can still subscribe to the store\r\nstore.subscribe(() => console.log(store.getState()));\r\n\r\n// Still pass action objects to `dispatch`, but they're created for us\r\nstore.dispatch(incremented());\r\n// {value: 1}\r\nstore.dispatch(incremented());\r\n// {value: 2}\r\nstore.dispatch(decremented());\r\n// {value: 1}\r\n"]}